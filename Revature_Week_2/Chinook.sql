--////////////////////////////PART I ////////////////////////---
------- 2.0 SQL QUERIES -------------
-- 2.1 QUERIES  SELECT--
SELECT *
FROM EMPLOYEE;

SELECT *
FROM EMPLOYEE
WHERE LASTNAME = 'KING';

SELECT *
FROM EMPLOYEE
WHERE LASTNAME = 'King';

SELECT * 
FROM EMPLOYEE 
WHERE FIRSTNAME = 'Andrew' 
AND REPORTSTO IS NULL;

-- 2.2 QUERIES ORDER BY --
SELECT *
FROM ALBUM
ORDER BY ALBUMID DESC;

SELECT FIRSTNAME
FROM CUSTOMER
ORDER BY FIRSTNAME ASC;

-- 2.3 QUERIES INSERT INTO--
INSERT INTO GENRE VALUES (26, 'Trap');
INSERT INTO GENRE VALUES (27, 'Salsa');

INSERT INTO EMPLOYEE (EMPLOYEEID, LASTNAME, FIRSTNAME)
VALUES (9, 'Marrero', 'Antonio');

INSERT INTO EMPLOYEE (EMPLOYEEID, LASTNAME, FIRSTNAME)
VALUES (10, 'Blake', 'Jaqueline');

INSERT INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL) VALUES (60, 'Mikey', 'Sepeda', 'Mikey@gmail.com');
INSERT INTO CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL) VALUES (61, 'Lola', 'Matracka', 'Lola@gmail.com');

-- 2.4 QUERIES UPDATE --
UPDATE CUSTOMER
SET FIRSTNAME='Robert', LASTNAME='Walker'
WHERE FIRSTNAME='Aaron' AND LASTNAME='Mitchell';

UPDATE ARTIST
SET NAME='CCR'
WHERE NAME='Creedence Clearwater Revival';

-- 2.5 QUERIES LIKE --
SELECT *
FROM INVOICE
WHERE BILLINGADDRESS LIKE '%T%';

-- 2.6 QUERIES BETWEEN --
SELECT *
FROM INVOICE
WHERE TOTAL BETWEEN 15 AND 50;

SELECT *
FROM EMPLOYEE
WHERE HIREDATE BETWEEN '01-JUN-03' AND '01-MAR-04';

-- 2.7 QUERIES DELETE ------
ALTER TABLE INVOICE
DROP CONSTRAINT FK_INVOICECUSTOMERID;
DELETE CUSTOMER
WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walker'; 

SELECT *
FROM CUSTOMER
WHERE FIRSTNAME = 'Robert';

------------------- SQL FUNCTIONS --------------------------------
-- 3.1 QUERIES SYSTEM DEFINED FUNCTIONS -- 
--- FIRST PART OF 3.1 ----
CREATE OR REPLACE FUNCTION get_date RETURN VARCHAR2
IS today VARCHAR2(30);
BEGIN
today:= TO_CHAR(SYSDATE, 'Dy DD-Mon-YYYY HH24:MI:SS');
RETURN today;
END;
/

SELECT get_date()
FROM DUAL;

--- SECOND PART OF 3.1 ----
CREATE OR REPLACE FUNCTION get_length(typeof IN NUMBER) 
RETURN NUMBER
 IS L NUMBER(3);
 
 BEGIN
 SELECT LENGTH(MEDIATYPE.NAME)
 INTO L
 FROM MEDIATYPE
 WHERE MEDIATYPEID=typeof;
 RETURN L;
 END;
 /

SELECT get_length(1)
FROM DUAL;

-- 3.2 QUERIES SYSTEM DEFINED AGGREGATE FUNCTIONS -- 
SELECT AVG(TOTAL)
FROM INVOICE;

--- SECOND PART 3.2 --------
CREATE OR REPLACE FUNCTION max_track 
RETURN SYS_REFCURSOR
IS S SYS_REFCURSOR;

BEGIN
OPEN S FOR 
SELECT NAME,UNITPRICE
FROM TRACK
WHERE UNITPRICE IN
(SELECT MAX(UNITPRICE)
FROM TRACK);
RETURN S;
END;
/

SELECT max_track()
FROM DUAL;

-- 3.3 QUERIES USER DEFINED SCALAR FUNCTIONS --
CREATE OR REPLACE FUNCTION myavg(unit NUMBER,
total NUMBER) RETURN NUMBER AS res NUMBER; 
BEGIN

res := (unit/total);

RETURN res;
END;
/
SELECT myavg(SUM(UNITPRICE),COUNT(UNITPRICE))
FROM INVOICELINE;

-- 3.4 QUERIES USER DEFINED TABLE VALUED FUNCTIONS --
CREATE OR REPLACE FUNCTION bday_func RETURN SYS_REFCURSOR
IS S SYS_REFCURSOR;

BEGIN 
OPEN S FOR
SELECT EMPLOYEEID,BIRTHDATE
FROM EMPLOYEE
WHERE BIRTHDATE>'31-DEC-68';
RETURN S;
END;
/
SELECT bday_func() AS bdays
FROM dual;

---------------- STORED PROCEDURES -------------------
-- 4.1 QUERIES BASIC STORED PROCEDURE --
CREATE OR REPLACE PROCEDURE GET_NAME
IS 
S      SYS_REFCURSOR;
TEMP_FN  EMPLOYEE.FIRSTNAME%TYPE;
TEMP_LN  EMPLOYEE.LASTNAME%TYPE;
BEGIN 
OPEN S FOR
SELECT FIRSTNAME, LASTNAME
FROM EMPLOYEE;

LOOP
FETCH S INTO TEMP_FN, TEMP_LN;
EXIT WHEN S%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(TEMP_FN||' '||TEMP_LN);
END LOOP;
CLOSE S;
END;
/
BEGIN 
GET_NAME();
END;
/

-- 4.2 QUERIES STORED PROCEDURE INPUT PARAMETERS--

-- FIRST PART 4.2 --------
CREATE OR REPLACE PROCEDURE PERSONAL_TYPE(
FIRST_NAME IN EMPLOYEE.FIRSTNAME%TYPE,
LAST_NAME IN EMPLOYEE.LASTNAME%TYPE,
PHONE_NUMBER IN EMPLOYEE.PHONE%TYPE,
ID_EMPLOYEE IN EMPLOYEE.EMPLOYEEID%TYPE)
AS
BEGIN
UPDATE EMPLOYEE 
SET FIRSTNAME = FIRST_NAME, LASTNAME = LAST_NAME,
PHONE = PHONE_NUMBER
WHERE EMPLOYEEID=ID_EMPLOYEE;
END;
/

EXECUTE PERSONAL_TYPE('Tommy', 'Jones', '+1 (706) 254-7074', 1);
SELECT *
FROM EMPLOYEE;




----- SECOND PART OF 4.2 -----
CREATE OR REPLACE PROCEDURE da_boss
IS
S           SYS_REFCURSOR;
TEMP_FNAME  EMPLOYEE.FIRSTNAME%TYPE;
TEMP_BOSS   EMPLOYEE.REPORTSTO%TYPE;
BEGIN
OPEN S FOR
SELECT FIRSTNAME, REPORTSTO
FROM EMPLOYEE;

LOOP
FETCH S INTO TEMP_FNAME, TEMP_BOSS;
EXIT WHEN S%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(TEMP_FNAME||' '||TEMP_BOSS);
END LOOP;
CLOSE S;
END;
/

BEGIN
    da_boss();
END;
/
         

-- 4.3 QUERIES STORED PROCEDURE OUTPUT PARAMETERS--
CREATE OR REPLACE PROCEDURE GET_NAMES_AND_COMP
IS
S           SYS_REFCURSOR;
TEMP_FNAME  CUSTOMER.FIRSTNAME%TYPE;
TEMP_LNAME  CUSTOMER.LASTNAME%TYPE;
TEMP_CMPNY  CUSTOMER.COMPANY%TYPE;
BEGIN
OPEN S FOR
SELECT FIRSTNAME, LASTNAME, COMPANY
FROM CUSTOMER;

LOOP
FETCH S INTO TEMP_FNAME, TEMP_LNAME, TEMP_CMPNY;
EXIT WHEN S%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(TEMP_FNAME||' , '||TEMP_LNAME||' : '||TEMP_CMPNY);
END LOOP;
CLOSE S;
END;
/

BEGIN
    GET_NAMES_AND_COMP();
END;
/

-- 5.0 QUERIES TRANSACTIONS --

------- FIRST PART 5.0 ------
ALTER TABLE INVOICELINE
   DROP CONSTRAINT FK_INVOICELINEINVOICEID;  
ALTER TABLE INVOICELINE
   ADD CONSTRAINT FK_INVOICELINEINVOICEID
   FOREIGN KEY (INVOICEID) REFERENCES INVOICE(INVOICEID) ON DELETE CASCADE;
DELETE
FROM INVOICE
WHERE INVOICEID = 1;
COMMIT; 

------ SECOND PART 5.0 -----------
CREATE SEQUENCE CUSTOMER_SEQ
MINVALUE 1
MAXVALUE 999999999
INCREMENT BY 1
START WITH 61;

CREATE OR REPLACE TRIGGER INS_NEW_REC
BEFORE INSERT ON CUSTOMER
FOR EACH ROW
BEGIN
    SELECT CUSTOMER_SEQ.NEXTVAL
    INTO :new.CUSTOMERID
    FROM dual;
END;
/

CREATE OR REPLACE PROCEDURE new_record_insert(FNAME VARCHAR2, LNAME VARCHAR2,
EMAIL VARCHAR2)
IS
BEGIN
INSERT INTO CUSTOMER(CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL)
VALUES(CUSTOMER_SEQ.NEXTVAL, FNAME, LNAME, EMAIL);
END;
/
BEGIN
new_record_insert('Gerald','Kelogs','gerald@gmail.com');
END;
/

SELECT*
FROM CUSTOMER;

-- 6.1 QUERIES TRIGGERS AFTER/FOR ---

-- QUERY A ---
CREATE SEQUENCE EMPLOYEE_SEQ
MINVALUE 1
MAXVALUE 99999999999999999
INCREMENT BY 1
START WITH 60;
SET serveroutput ON;
CREATE OR REPLACE TRIGGER ins_trigger
AFTER INSERT ON EMPLOYEE
FOR EACH ROW

BEGIN

DBMS_OUTPUT.PUT_LINE('HELLO');
END;
/

INSERT INTO EMPLOYEE (EMPLOYEEID,FIRSTNAME,LASTNAME) VALUES(1339,'Jason','Zimmerman');

-- QUERY B ---
CREATE SEQUENCE ALBUM_SEQ
MINVALUE 1
MAXVALUE 999999999
INCREMENT BY 1
START WITH 348;

SET SERVEROUTPUT ON;

CREATE OR REPLACE TRIGGER ALBUM_TRIGGER
AFTER UPDATE ON ALBUM
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('ROW UPDATED');
END;
/

INSERT INTO ALBUM(ALBUMID, TITLE, ARTISTID)
VALUES(348, 'A Love Song', 160);


-- QUERY C ---
SET SERVEROUTPUT ON;
CREATE OR REPLACE TRIGGER AFTER_DELETE
AFTER DELETE
ON CUSTOMER
FOR EACH ROW 
BEGIN
DBMS_OUTPUT.PUT_LINE('Item deleted');
END;
/
DELETE FROM CUSTOMER
WHERE CUSTOMERID=62;

-- 6.2 QUERIES BEFORE ---
CREATE OR REPLACE TRIGGER before_delete
BEFORE DELETE ON INVOICE
FOR EACH ROW
BEGIN
IF (:old.TOTAL > 50) THEN
   RAISE_APPLICATION_ERROR(-20000, 'Records cannot be deleted'); 
END IF;
END;
/

-- 7.0 JOINS ---------------
-- 7.1 QUERIES INNER --
SELECT CONCAT(FIRSTNAME, CONCAT(' ',LASTNAME)) AS CUSTOMER_NAME, INVOICEID
FROM CUSTOMER
JOIN INVOICE
ON CUSTOMER.CUSTOMERID=INVOICE.CUSTOMERID;

-- 7.2 QUERIES OUTER  --
SELECT CUSTOMER.CUSTOMERID, FIRSTNAME, LASTNAME, INVOICEID, TOTAL
FROM CUSTOMER
FULL OUTER JOIN INVOICE
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

-- 7.3 QUERIES  RIGHT --
SELECT NAME, TITLE
FROM ALBUM
RIGHT OUTER JOIN ARTIST
ON ARTIST.ARTISTID = ALBUM.ARTISTID;

-- 7.4 QUERIES CROSS --
SELECT NAME
FROM ARTIST
CROSS JOIN ALBUM
ORDER BY NAME;

-- 7.5 QUERIES SELF--
SELECT e1.FIRSTNAME, e2.REPORTSTO
FROM EMPLOYEE e1, EMPLOYEE e2
WHERE e1.REPORTSTO=e2.EMPLOYEEID;

---- 8.1 QUERIES CLUSTERED INDEXES ----
CREATE INDEX CUST_INDEX ON CUSTOMER(FIRSTNAME, LASTNAME, COMPANY);

-- 9.0 ADMINISTRATION
-- CREATE A .BAK FILE FOR CHINOOK DATABASE


--////////////////////////////PART II ////////////////////////---
-- 1.0 CREATING OFFICE SUPPLY DATABASE -------------
-- 1.1 QUERIES Create Company Database using SSMS Interface ------
-- DONE --
-- 1.2 QUERIES CREATE COMPANY DATABASE USING DDL ---
CREATE USER OfficeSupply
IDENTIFIED BY p4ssw0rd
DEFAULT TABLESPACE users
TEMPORARY TABLESPACE temp
QUOTA 10M ON users;

GRANT connect to OfficeSupply;
GRANT resource to OfficeSupply;
GRANT create session TO OfficeSupply;
GRANT create table TO OfficeSupply;
GRANT create view TO OfficeSupply;

-- 2.0 CREATE TABLES AND RELATIONSHIP ------
-- 2.1 CREATE TABLE FOR OFFICSUPPLY --------
CREATE TABLE EMPLOYEES(

EMPLOYEEID NUMBER NOT NULL,
USERNAME VARCHAR(20) NOT NULL,
PASSWORD VARCHAR(20) NOT NULL,
NAME VARCHAR(25) NOT NULL,
DEPARTMENT CHAR(2) NOT NULL,
MANAGER NUMBER NOT NULL,

CONSTRAINT PK_EMPLOYEES PRIMARY KEY(EMPLOYEEID)
);

-- ORDERS TABLE --
CREATE TABLE ORDERS
(
ORDERID NUMBER NOT NULL,
EMPLOYEEID NUMBER NOT NULL,
ORDERDATE DATE NOT NULL,
STATUS CHAR NOT NULL,

CONSTRAINT PK_ORDERS PRIMARY KEY(ORDERID),
CONSTRAINT FK_EMPLOYEES FOREIGN KEY(EMPLOYEEID)REFERENCES EMPLOYEES
ON DELETE SET NULL
);

-- CATEGORY TABLE -------
CREATE TABLE CATEGORY(
PRODUCTID NUMBER NOT NULL,
NAME VARCHAR2(80),
DESCRIPT VARCHAR2(255),
CONSTRAINT PK_CATEGORY PRIMARY KEY(PRODUCTID)
);

-- ORDERITEM TABLE --
CREATE TABLE ORDERITEM
(
ORDERID NUMBER NOT NULL,
PRODUCTID NUMBER NOT NULL,
QUANTITY NUMBER NOT NULL,

CONSTRAINT PK_ORDERITEM PRIMARY KEY(ORDERID, PRODUCTID),
CONSTRAINT FK_ORDER FOREIGN KEY(ORDERID) REFERENCES ORDERS
ON DELETE SET NULL,
CONSTRAINT FK_PRODUCT FOREIGN KEY(PRODUCTID)REFERENCES PRODUCT
ON DELETE SET NULL
);

--- PRODUCT TABLE ---
CREATE TABLE PRODUCT(
PRODUCTID NUMBER NOT NULL,
CATID NUMBER NOT NULL,
NAME VARCHAR(80),
DESCRIPT VARCHAR(255),
UNITCOST NUMBER,
SUPPID NUMBER NOT NULL,

CONSTRAINT PK_PRODUCT PRIMARY KEY (PRODUCTID),
CONSTRAINT FK_CATEGORY FOREIGN KEY (CATID) REFERENCES CATEGORY ON DELETE SET NULL,
CONSTRAINT FK_SUPPLIER FOREIGN KEY (SUPPID) REFERENCES SUPPLIER ON DELETE SET NULL);

-- SUPPLIER TABLE --
CREATE TABLE SUPPLIER(
SUPPID NUMBER NOT NULL,
NAME VARCHAR(80),

CONSTRAINT PK_SUPPLIER PRIMARY KEY(SUPPID)
);

---- 2.2 QUERIES ----

--- 3.0 PERFORMING SQL QUERIES ---
-- PRODUCT TABLE --
INSERT INTO PRODUCT VALUES (1, 2, 'Ruler', '12 Inch Stainless Steel', 3.79, 2);
INSERT INTO PRODUCT VALUES (2, 1, 'Transparency', 'Quick dry ink jet', 24.49, 1);
INSERT INTO PRODUCT VALUES (3, 1, 'Overhead Bulb', 'High intensity replacement bulb', 12.00, 1);
INSERT INTO PRODUCT VALUES (4, 1, 'Laser Pointer', 'General purpose laser pointer', 29.99, 2);
INSERT INTO PRODUCT VALUES (5, 2, 'Colored Pencils', 'Non toxic 12 pack', 2.84, 1);
INSERT INTO PRODUCT VALUES (6, 3, 'All-Purpose Cleaner', 'Use on all washable surfaces', 4.29, 2);
INSERT INTO PRODUCT VALUES (7, 3, 'Paper Hand Towels', '320 sheet per roll', 5.25, 1);
INSERT INTO PRODUCT VALUES (8, 4, 'CD-R', '700mb with jewel case', 1.09, 1);
INSERT INTO PRODUCT VALUES (9, 4, '3.5 inch Disks', 'High Density Formatted Box of 10', 5.99, 1);
INSERT INTO PRODUCT VALUES (10, 4, 'Monitor wipes', 'Non abrasive link free', 6.99, 2);
INSERT INTO PRODUCT VALUES (11, 4, 'Dust Blaster', 'Ozone safe no CFCs', 8.99, 2);
INSERT INTO PRODUCT VALUES (12, 2, 'Clear Tape', '1 Inch wide 6 rolls', 3.90, 1);
INSERT INTO PRODUCT VALUES (13, 1, 'Overhead Projector', 'Portable with travel cover', 759.97, 1);
INSERT INTO PRODUCT VALUES (14, 2, 'Glue Stick', 'Oderless non toxic', 1.99, 2);

-- SUPPLIER TABLE
INSERT INTO SUPPLIER VALUES (1, 'XYZ OFFICE SUPPLIES');
INSERT INTO SUPPLIER VALUES (2, 'ABC OFFICE PRODUCTS');

-- CATEGORY TABLE --
INSERT INTO CATEGORY (PRODUCTID,NAME)
VALUES (1,'Audio Visual');

INSERT INTO CATEGORY (PRODUCTID,NAME)
VALUES (2,'Art Supplies');

INSERT INTO CATEGORY (PRODUCTID,NAME)
VALUES (3,'Cleaning Supplies');

INSERT INTO CATEGORY (PRODUCTID,NAME)
VALUES (4,'Computer Supplies');

INSERT INTO CATEGORY (PRODUCTID,NAME)
VALUES (5,'Desk Accesories');

INSERT INTO CATEGORY (PRODUCTID,NAME)
VALUES (6,'Writting Supplies');

INSERT INTO CATEGORY (PRODUCTID,NAME)
VALUES (7,'Printer Supplies');

-- 3.1 SELECT ---
SELECT *
FROM EMPLOYEES;

SELECT *
FROM EMPLOYEES
WHERE DEPARTMENT = 'HR';

SELECT * 
FROM EMPLOYEES
WHERE USERNAME = 'jsmith' AND DEPARTMENT = 'HR';

SELECT *
FROM EMPLOYEES 
WHERE MANAGER = 1 AND DEPARTMENT = 'HR';

-- 3.2 ORDER BY --
SELECT NAME
FROM PRODUCT
ORDER BY NAME;

SELECT NAME
FROM PRODUCT
ORDER BY NAME DESC;

SELECT *
FROM CATEGORY
ORDER BY NAME;

-- 3.3 INSERT INTO --
INSERT INTO EMPLOYEES (EMPLOYEEID,USERNAME,PASSWORD,NAME,DEPARTMENT,MANAGER)
VALUES (6,'zvaughn','zva','zvaughn','HR',0);

INSERT INTO CATEGORY (PRODUCTID, NAME) VALUES (8,'Printer Supplies');

INSERT INTO SUPPLIER VALUES (3,'OFFICE SUPPLIES');
INSERT INTO SUPPLIER VALUES (4,'REVATURE SUPPLIES');
INSERT INTO SUPPLIER VALUES (5,'HOME SUPPLIES');

-- 3.4 UPDATE --
UPDATE PRODUCT
SET UNITCOST = 30
WHERE NAME = 'Ruler';

UPDATE CATEGORY
SET DESCRIPT = 'Office'
WHERE NAME = 'Computer Supplies' OR NAME = 'Cleaning Supplies';

-- 3.5 LIKE --
SELECT *
FROM EMPLOYEES
WHERE USERNAME LIKE '%j%';

SELECT NAME 
FROM PRODUCT
WHERE NAME LIKE '%O%';

-- 3.6 BETWEEN --
SELECT NAME
FROM PRODUCT
WHERE UNITCOST BETWEEN 3 AND 10;

SELECT NAME
FROM PRODUCT
WHERE UNITCOST BETWEEN 500 AND 800;

-- 3.7 DELETE --
DELETE FROM CATEGORY 
WHERE NAME = 'Audio Visual'; --REVISE PLS --

DELETE FROM SUPPLIER WHERE NAME = 'OFFICE SUPPLIES';
DELETE FROM SUPPLIER WHERE NAME = 'REVATURE SUPPLIES';
DELETE FROM SUPPLIER WHERE NAME = 'HOME SUPPLIES';

--- 4.1 SYSTEM DEFINED SCALAR FUNCTIONS ---
-- A --
CREATE OR REPLACE FUNCTION LASER_POINTER
RETURN NUMBER
IS 
    L   NUMBER;
BEGIN
    SELECT LENGTH(DESCRIPT) INTO L
    FROM PRODUCT
    WHERE NAME = 'Laser Pointer';
    RETURN L;
END;
/

SELECT LASER_POINTER FROM DUAL;

-- B --
SELECT UPPER(NAME) AS "FIRSTNAME"
FROM EMPLOYEES 
WHERE EMPLOYEEID = 1;


--- 4.2 SYSTEM DEFINED AGGREGATE FUNCTION ---
-- A --
SELECT SUM(UNITCOST)
FROM PRODUCT;

-- B --
SELECT COUNT(PRODUCTID)
FROM PRODUCT;

--- 4.3 USER DEFINE SCALAR FUNCTIONS ---
CREATE OR REPLACE FUNCTION sum_products(x NUMBER, y NUMBER)
RETURN NUMBER AS total NUMBER;
BEGIN
total := x + y;

RETURN total;
END;
/

--- 4.4 USER DEFINE TABLE VALUED FUNCTIONS ---
CREATE OR REPLACE FUNCTION manager_pairing(x IN VARCHAR2, y IN NUMBER)
RETURN NUMBER AS BOOL NUMBER;
BEGIN
SELECT COUNT(EMPLOYEEID) INTO BOOL
FROM EMPLOYEES WHERE NAME = X AND MANAGER = Y;
RETURN BOOL;
END;
/
SELECT manager_pairing('dclark', 0)
FROM DUAL;

--- 5.1 BASIC STORED PROCEDURE --
--- A ---
CREATE OR REPLACE PROCEDURE GET_NAMES
IS
S           SYS_REFCURSOR;
TEMP_UNAME  EMPLOYEES.USERNAME%TYPE;
TEMP_DEP  EMPLOYEES.DEPARTMENT%TYPE;
TEMP_MANA  EMPLOYEES.MANAGER%TYPE;
BEGIN
OPEN S FOR
SELECT USERNAME, DEPARTMENT, MANAGER
FROM EMPLOYEES;
LOOP
FETCH S INTO TEMP_UNAME, TEMP_DEP, TEMP_MANA;
EXIT WHEN S%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(TEMP_UNAME||' , '||TEMP_DEP||' : '||TEMP_MANA);
END LOOP;
CLOSE S;
END;
/

BEGIN
GET_NAMES();
END;
/

--- B ---
CREATE OR REPLACE PROCEDURE GET_COST
IS
S           SYS_REFCURSOR;
TEMP_NAME  PRODUCT.NAME%TYPE;
TEMP_COST PRODUCT.UNITCOST%TYPE;

BEGIN
OPEN S FOR
SELECT NAME, UNITCOST
FROM PRODUCT;
LOOP
FETCH S INTO TEMP_NAME, TEMP_COST;
EXIT WHEN S%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(TEMP_NAME||' , '||TEMP_COST);
END LOOP;
CLOSE S;
END;
/

BEGIN
GET_COST();
END;
/

--- 5.2 BASIC STORED PROCEDURE ---
-- A --
CREATE OR REPLACE PROCEDURE PRODUCT_PRO
IS
S           SYS_REFCURSOR;
TEMP_NAME  PRODUCT.NAME%TYPE;
TEMP_DESC   PRODUCT.DESCRIPT%TYPE;
TEMP_ID     PRODUCT.PRODUCTID%TYPE;
BEGIN
OPEN S FOR
SELECT NAME, DESCRIPT
FROM PRODUCT;
LOOP
FETCH S INTO TEMP_NAME, TEMP_DESC;
EXIT WHEN S%NOTFOUND;
DBMS_OUTPUT.PUT_LINE(TEMP_NAME||','||TEMP_DESC);
END LOOP;
CLOSE S;
END;
/

BEGIN
PRODUCT_PRO();
END;
/

-- B --

CREATE OR REPLACE PROCEDURE NEW_MANAGER
(EMP_ID EMPLOYEES.EMPLOYEEID%TYPE, 
USRNM EMPLOYEES.USERNAME%TYPE,
PSSWRD EMPLOYEES.PASSWORD%TYPE, 
EMP_NAME EMPLOYEES.NAME%TYPE,
EMP_DPT EMPLOYEES.DEPARTMENT%TYPE,
MANAG EMPLOYEES.MANAGER%TYPE)

IS 
BEGIN
    INSERT INTO EMPLOYEES VALUES(EMP_ID,USRNM,PSSWRD,EMP_NAME,EMP_DPT,0);
END;
/

BEGIN
    NEW_MANAGER(6,'MIKEY','MIKE','MICHALE','IT');
END;
/

--- 5.3 STORED PROCEDURE OUTPUT PARAMETERS --
--- A ---
CREATE OR REPLACE PROCEDURE GET_PRODUCTS_TOTAL
(S OUT SYS_REFCURSOR)
IS
TOTAL NUMBER(8);
TEMP_UP PRODUCT.UNITCOST%TYPE;
BEGIN
    OPEN S FOR
    SELECT UNITCOST
    FROM PRODUCT;
    TOTAL := 0;
    LOOP
        FETCH S INTO TEMP_UP;
        EXIT WHEN S%NOTFOUND;
        TOTAL := TOTAL + TEMP_UP;
    END LOOP;
    CLOSE S;
    DBMS_OUTPUT.PUT_LINE('UNITPRICE TOTAL: ' ||TOTAL);
END;
/

DECLARE
    S   SYS_REFCURSOR;
BEGIN
    GET_PRODUCTS_TOTAL(S);
END;
/

---- B ----

CREATE OR REPLACE PROCEDURE GET_EMPLOYEE_INFO
(EMP_ID EMPLOYEES.EMPLOYEEID%TYPE)
IS 
TEMP_UN     EMPLOYEES.USERNAME%TYPE;
TEMP_PSSWD  EMPLOYEES.PASSWORD%TYPE;
BEGIN
SELECT USERNAME INTO TEMP_UN
FROM EMPLOYEES
WHERE EMPLOYEEID = EMP_ID;
SELECT PASSWORD INTO TEMP_PSSWD
FROM EMPLOYEES
WHERE EMPLOYEEID = EMP_ID;
DBMS_OUTPUT.PUT_LINE('USERNAME: '||TEMP_UN||', PASSWORD: ' ||TEMP_PSSWD);
END;
/

BEGIN
    GET_EMPLOYEE_INFO(3);
END;
/

--- 6.0 TRANSACTIONS ---
--- A ---
CREATE OR REPLACE PROCEDURE INSERT_EMPLOYEE(EMP_UN OFFICESUPPLY.EMPLOYEES.USERNAME%TYPE, 
                                                EMP_PASS OFFICESUPPLY.EMPLOYEES.PASSWORD%TYPE, 
                                                EMP_NAM OFFICESUPPLY.EMPLOYEES.NAME%TYPE, 
                                                EMP_DEP OFFICESUPPLY.EMPLOYEES.DEPARTMENT%TYPE, 
                                                EMP_MAN OFFICESUPPLY.EMPLOYEES.MANAGER%TYPE)
IS
    LAST_ID     EMPLOYEES.EMPLOYEEID%TYPE;
BEGIN
    SELECT MAX(EMPLOYEEID)
    INTO LAST_ID
    FROM EMPLOYEES;
    INSERT INTO EMPLOYEES(EMPLOYEEID, USERNAME, PASSWORD, NAME, DEPARTMENT, MANAGER) VALUES (LAST_ID + 1, EMP_UN, EMP_PASS, EMP_NAM, EMP_DEP, EMP_MAN);    
    COMMIT;
END;
/

BEGIN
    INSERT_EMPLOYEE('Jojo', 'jojo123', 'JKelly','IT',1);
END;
/

--- B ---
CREATE OR REPLACE PROCEDURE updating_price(prod PRODUCT.NAME%TYPE,
pric PRODUCT.UNITCOST%TYPE)
IS
BEGIN
    UPDATE PRODUCT
    SET UNITCOST = pric
    WHERE NAME = prod;
    COMMIT;
END;
/

BEGIN
   updating_price('Ruler',2.79);
END;
/

--- C ---
CREATE OR REPLACE PROCEDURE UPDATE_CAT(rc1id CATEGORY.PRODUCTID%TYPE, 
rc1n CATEGORY.NAME%TYPE, 
rc1d CATEGORY.DESCRIPT%TYPE,
rc2id CATEGORY.PRODUCTID%TYPE, 
rc2n CATEGORY.NAME%TYPE,
rc2d CATEGORY.DESCRIPT%TYPE) 
 IS
 BEGIN
    UPDATE CATEGORY
    SET NAME = rc1n, DESCRIPT = rc1d
    WHERE PRODUCTID = rc1id;
    UPDATE CATEGORY
    SET NAME = rc2n, DESCRIPT = rc2d
    WHERE PRODUCTID = rc2id;
    COMMIT;
 END;
 /
 
BEGIN
    OFFICESUPPLY.UPDATE_CAT(8 ,'Staplers', 'STAPLERS FOR EVERYONE', 7, 'Printers', '');
END;
/

--- 7.1 AFTER/FOR TRIGGERS ---

-- A --
CREATE SEQUENCE EMPLOYEE_SEQ
MINVALUE 1
MAXVALUE 99999999999999999
INCREMENT BY 1
START WITH 60;
SET serveroutput ON;
CREATE OR REPLACE TRIGGER ins_trigger
AFTER INSERT ON CATEGORY
FOR EACH ROW

BEGIN

DBMS_OUTPUT.PUT_LINE('HELLO');
END;
/

--- B ---

CREATE SEQUENCE CATEGORY_SEQ
MINVALUE 1
MAXVALUE 999999999
INCREMENT BY 1
START WITH 348;
SET SERVEROUTPUT ON;
CREATE OR REPLACE TRIGGER CATEGORY_TRIGGER
AFTER UPDATE ON CATEGORY
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('ROW UPDATED');
END;
/

--- C ---
CREATE OR REPLACE TRIGGER AFTER_DELETE2
AFTER DELETE
ON CATEGORY
FOR EACH ROW 

BEGIN

DBMS_OUTPUT.PUT_LINE('Item deleted');
END;
/

--- 7.2 BEFORE TRIGGERS ---
CREATE OR REPLACE TRIGGER RESTRICT_DELETE
BEFORE DELETE
ON PRODUCT
FOR EACH ROW

DECLARE
products_count number;

BEGIN
products_count := 0;
SELECT count(1) INTO products_count FROM PRODUCT WHERE UNITCOST < 500;
IF (products_count < 500) THEN
RAISE_APPLICATION_ERROR(-20000,products_count || ' products found. First ensure product unit price is above $500.');
END IF;
END;
/

-- 8.1 INNER JOIN --
SELECT PRODUCT.PRODUCTID, CATEGORY.PRODUCTID
FROM PRODUCT
INNER JOIN CATEGORY ON  PRODUCT.PRODUCTID = CATEGORY.PRODUCTID;

SELECT ORDERS.EMPLOYEEID, EMPLOYEES.EMPLOYEEID
FROM ORDERS
INNER JOIN EMPLOYEES ON ORDERS.EMPLOYEEID = EMPLOYEES.EMPLOYEEID;

--- 8.2 OUTER JOIN ---
SELECT ORDERITEM.PRODUCTID, ORDERID, QUANTITY, CATID, NAME, DESCRIPT, UNITCOST, SUPPID
FROM PRODUCT
FULL OUTER JOIN ORDERITEM ON ORDERITEM.PRODUCTID = PRODUCT.PRODUCTID;

SELECT ORDERS.EMPLOYEEID, ORDERID, ORDERDATE, STATUS, USERNAME, PASSWORD, NAME, DEPARTMENT, MANAGER
FROM ORDERS
FULL OUTER JOIN EMPLOYEES ON EMPLOYEES.EMPLOYEEID = ORDERS.EMPLOYEEID;

--- 8.3 RIGHT JOIN ---
SELECT ORDERS.ORDERID, EMPLOYEEID, ORDERDATE, STATUS, PRODUCTID, QUANTITY
FROM ORDERS
RIGHT JOIN ORDERITEM ON ORDERITEM.ORDERID = ORDERS.ORDERID;

SELECT ORDERITEM.PRODUCTID, ORDERID, QUANTITY, CATID, NAME, DESCRIPT, UNITCOST, SUPPID
FROM ORDERITEM
RIGHT JOIN PRODUCT ON PRODUCT.PRODUCTID = ORDERITEM.PRODUCTID;

--- 8.4 LEFT JOIN ---
SELECT PRODUCT.PRODUCTID, CATID, PRODUCT.NAME, PRODUCT.DESCRIPT, UNITCOST, SUPPID
FROM CATEGORY
LEFT JOIN PRODUCT ON PRODUCT.PRODUCTID = CATEGORY.PRODUCTID;

SELECT EMPLOYEES.EMPLOYEEID, USERNAME, PASSWORD, NAME, DEPARTMENT, MANAGER, ORDERID, ORDERDATE, STATUS
FROM ORDERS
LEFT JOIN EMPLOYEES ON EMPLOYEES.EMPLOYEEID = ORDERS.EMPLOYEEID;

--- 8.5 CROSS JOIN ---
SELECT *
FROM PRODUCT
CROSS JOIN CATEGORY;

--- 8.6 SELF - JOIN ----

SELECT E1.EMPLOYEEID AS EMPLOYEES, E2.MANAGER AS EMPLOYEES
FROM EMPLOYEES E1, EMPLOYEES E2
WHERE E1.EMPLOYEEID = E2.MANAGER;

--- 9.0 VIEWS ---

ALTER TABLE EMPLOYEES
ADD SSN NUMBER;
ALTER TABLE EMPLOYEES
ADD SALARY NUMBER;

CREATE VIEW NEW_VIEW AS 
SELECT EMPLOYEEID, USERNAME, PASSWORD, NAME, DEPARTMENT, MANAGER
FROM EMPLOYEES;

CREATE VIEW PRODUCTS_VIEW AS
SELECT NAME, DESCRIPT
FROM PRODUCT;

--- 10 INDEX ---

CREATE INDEX CUST_INDEX2 ON ORDERITEM(ORDERID, PRODUCTID, QUANTITY);

